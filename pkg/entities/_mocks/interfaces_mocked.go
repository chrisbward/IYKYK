// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/entities/interfaces.go

// Package mockedinterfaces is a generated GoMock package.
package mockedinterfaces

import (
	reflect "reflect"
	strings "strings"

	entities "github.com/chrisbward/IYKYK/pkg/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockIContentController is a mock of IContentController interface.
type MockIContentController struct {
	ctrl     *gomock.Controller
	recorder *MockIContentControllerMockRecorder
}

// MockIContentControllerMockRecorder is the mock recorder for MockIContentController.
type MockIContentControllerMockRecorder struct {
	mock *MockIContentController
}

// NewMockIContentController creates a new mock instance.
func NewMockIContentController(ctrl *gomock.Controller) *MockIContentController {
	mock := &MockIContentController{ctrl: ctrl}
	mock.recorder = &MockIContentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContentController) EXPECT() *MockIContentControllerMockRecorder {
	return m.recorder
}

// CleanContentAutomatic mocks base method.
func (m *MockIContentController) CleanContentAutomatic(input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanContentAutomatic", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanContentAutomatic indicates an expected call of CleanContentAutomatic.
func (mr *MockIContentControllerMockRecorder) CleanContentAutomatic(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanContentAutomatic", reflect.TypeOf((*MockIContentController)(nil).CleanContentAutomatic), input)
}

// DoCleanWithStripFunctions mocks base method.
func (m *MockIContentController) DoCleanWithStripFunctions(input string, funcs ...entities.StripFunction) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{input}
	for _, a := range funcs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoCleanWithStripFunctions", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoCleanWithStripFunctions indicates an expected call of DoCleanWithStripFunctions.
func (mr *MockIContentControllerMockRecorder) DoCleanWithStripFunctions(input interface{}, funcs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{input}, funcs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoCleanWithStripFunctions", reflect.TypeOf((*MockIContentController)(nil).DoCleanWithStripFunctions), varargs...)
}

// MockIStripContentController is a mock of IStripContentController interface.
type MockIStripContentController struct {
	ctrl     *gomock.Controller
	recorder *MockIStripContentControllerMockRecorder
}

// MockIStripContentControllerMockRecorder is the mock recorder for MockIStripContentController.
type MockIStripContentControllerMockRecorder struct {
	mock *MockIStripContentController
}

// NewMockIStripContentController creates a new mock instance.
func NewMockIStripContentController(ctrl *gomock.Controller) *MockIStripContentController {
	mock := &MockIStripContentController{ctrl: ctrl}
	mock.recorder = &MockIStripContentControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStripContentController) EXPECT() *MockIStripContentControllerMockRecorder {
	return m.recorder
}

// ReplaceInput mocks base method.
func (m *MockIStripContentController) ReplaceInput(input string, replacer *strings.Replacer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceInput", input, replacer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceInput indicates an expected call of ReplaceInput.
func (mr *MockIStripContentControllerMockRecorder) ReplaceInput(input, replacer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceInput", reflect.TypeOf((*MockIStripContentController)(nil).ReplaceInput), input, replacer)
}

// StripInputOfAngledQuotes mocks base method.
func (m *MockIStripContentController) StripInputOfAngledQuotes(input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StripInputOfAngledQuotes", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StripInputOfAngledQuotes indicates an expected call of StripInputOfAngledQuotes.
func (mr *MockIStripContentControllerMockRecorder) StripInputOfAngledQuotes(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StripInputOfAngledQuotes", reflect.TypeOf((*MockIStripContentController)(nil).StripInputOfAngledQuotes), input)
}

// StripInputOfEmDash mocks base method.
func (m *MockIStripContentController) StripInputOfEmDash(input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StripInputOfEmDash", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StripInputOfEmDash indicates an expected call of StripInputOfEmDash.
func (mr *MockIStripContentControllerMockRecorder) StripInputOfEmDash(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StripInputOfEmDash", reflect.TypeOf((*MockIStripContentController)(nil).StripInputOfEmDash), input)
}

// StripInputOfEmoji mocks base method.
func (m *MockIStripContentController) StripInputOfEmoji(input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StripInputOfEmoji", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StripInputOfEmoji indicates an expected call of StripInputOfEmoji.
func (mr *MockIStripContentControllerMockRecorder) StripInputOfEmoji(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StripInputOfEmoji", reflect.TypeOf((*MockIStripContentController)(nil).StripInputOfEmoji), input)
}
